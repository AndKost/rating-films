
    Spark поддерживает лямбда-выражения из Java 8. Потому стоит перейти на нее. С ними код для Spark выглядит значительно лаконичней.
    

    Избегайте магических литералов в коде. Определите вместо них константы. Например, TOP_COUNT вместо 10, REPORT_DB_NAME вместо "test". 

    Не злоупотребляйте использованием статических методов и полей. Статические методы не поддерживают полиморфизм. Конкретно в случае классов TotalTopFilms и RatingByGenre поле context следует сделать нестатическим. Соответственно все методы, непосредственно или косвенно использующие это поле, нужно будет также сделать нестатическими. После этого из этих двух классов можно будет выделить общий абстрактый базовый класс. Это поможет также избавиться от дублирования кода в классах TotalTopFilms и RatingByGenre.

    Избегайте неиформативных идентификаторов, таких как a, o1 и т.п.
    Уберите избыточные инструкции if/else, вроде следующей:

        if (s._1 != -1)
            return true;
        else
            return false;

    Например, здесь следует просто вернуть условие.

    Приведите в порядок комментарии. Сейчас у Вас вперемешку используются комментарии на русском и английском.
    Поддерживайте список импортов в порядке. Неиспользуемые импорты следует удалять. Обычно это делают автоматически при помощи средства "Organize Imports" (есть в большинстве сред разработки).
    Старайтесь не коммитить в репозиторий закомментированный код.
    Дайте базе данных с отчетами более информативное название.


> еще необходимо убрать из индекса git папку target и файлы idea
Кроме этого, в репозиторий попали временные файлы (с тильдой в конце имени).

> Вопрос:
> Задание, например топ жанров по рейтингу фильмов от зрителя (для каждого зрителя), необходимо вычислять топ
> для каждого зрителя отдельно и затем сохранять в MongoDb? Я правильно понимаю?
> Возможно, этот вопрос из-за недостатка теоретических знаний, тогда посоветуйте где можно почитать материалы.

Необходимо получить результаты для каждого зрителя. Но вычисляться они должны за один проход для всех, а не за один проход на каждого отдельного зрителя.
Все результаты должны сохраняться в MongoDB (по условиям задачи).
